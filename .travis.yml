#
# Copyright (c) 2019 Kris Jusiak (kris at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
sudo: false

matrix:
  fast_finish: true
  include:

  - os: linux
    dist: xenial
    env: CXX=clang++-9 VARIANT=valgrind
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
          - clang-9
          - libstdc++-9-dev
          - valgrind

  - os: linux
    dist: xenial
    env: CXX=clang++-9 VARIANT=sanitizers
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
          - clang-9
          - libstdc++-9-dev
          - valgrind

  - os: linux
    dist: xenial
    env: CXX=g++-9 VARIANT=valgrind
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-9
          - libstdc++-9-dev
          - valgrind

  - os: linux
    dist: xenial
    env: CXX=g++-9 GCOV=gcov-9 VARIANT=coverage
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-9
          - libstdc++-9-dev

  - os: osx
    osx_image: xcode11.3
    env: CXX=clang++ VARIANT=valgrind

script:
  - git clone --depth 1 https://github.com/intel/tbb.git
  - export TBB_ROOT="$PWD/tbb"
  - if [ "${VARIANT}" == "valgrind" ]; then (
      cmake -Bbuild/debug -DCMAKE_BUILD_TYPE=Debug -DENABLE_MEMCHECK=ON -H. && cmake --build build/debug &&
      cmake -Bbuild/release -DCMAKE_BUILD_TYPE=Release -DENABLE_MEMCHECK=ON -H. && cmake --build build/release
    ); fi
  - if [ "${VARIANT}" == "sanitizers" ]; then (
      cmake -Bbuild/debug/sanitizers -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZERS=ON -H. && cmake --build build/debug/sanitizers
    ); fi
  - if [ "${VARIANT}" == "coverage" ]; then (
      cmake -Bbuild/debug/coverage -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON -H. && cmake --build build/debug/coverage &&
      bash <(curl -s https://codecov.io/bash) -x "${GCOV}"
    ); fi

notifications:
  on_success: change
  on_failure: always
  on_start: false
